//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace ianlee { namespace fezhatnode {

// Methods
public ref class fezhatnodeSetRedLedStateCalledEventArgs sealed
{
public:
    fezhatnodeSetRedLedStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property fezhatnodeSetRedLedStateResult^ Result
    {
        fezhatnodeSetRedLedStateResult^ get() { return m_result; }
        void set(_In_ fezhatnodeSetRedLedStateResult^ value) { m_result = value; }
    }

    property bool On
    {
        bool get() { return m_interfaceMemberOn; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<fezhatnodeSetRedLedStateResult^>^ GetResultAsync(fezhatnodeSetRedLedStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<fezhatnodeSetRedLedStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<fezhatnodeSetRedLedStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    fezhatnodeSetRedLedStateResult^ m_result;
    bool m_interfaceMemberOn;
};

public ref class fezhatnodeGetRedLedStateCalledEventArgs sealed
{
public:
    fezhatnodeGetRedLedStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property fezhatnodeGetRedLedStateResult^ Result
    {
        fezhatnodeGetRedLedStateResult^ get() { return m_result; }
        void set(_In_ fezhatnodeGetRedLedStateResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<fezhatnodeGetRedLedStateResult^>^ GetResultAsync(fezhatnodeGetRedLedStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<fezhatnodeGetRedLedStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<fezhatnodeGetRedLedStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    fezhatnodeGetRedLedStateResult^ m_result;
};

public ref class fezhatnodeSetRgbLedD2ColorCalledEventArgs sealed
{
public:
    fezhatnodeSetRgbLedD2ColorCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn, _In_ byte interfaceMemberRed, _In_ byte interfaceMemberGreen, _In_ byte interfaceMemberBlue);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property fezhatnodeSetRgbLedD2ColorResult^ Result
    {
        fezhatnodeSetRgbLedD2ColorResult^ get() { return m_result; }
        void set(_In_ fezhatnodeSetRgbLedD2ColorResult^ value) { m_result = value; }
    }

    property bool On
    {
        bool get() { return m_interfaceMemberOn; }
    }

    property byte Red
    {
        byte get() { return m_interfaceMemberRed; }
    }

    property byte Green
    {
        byte get() { return m_interfaceMemberGreen; }
    }

    property byte Blue
    {
        byte get() { return m_interfaceMemberBlue; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<fezhatnodeSetRgbLedD2ColorResult^>^ GetResultAsync(fezhatnodeSetRgbLedD2ColorCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<fezhatnodeSetRgbLedD2ColorResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<fezhatnodeSetRgbLedD2ColorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    fezhatnodeSetRgbLedD2ColorResult^ m_result;
    bool m_interfaceMemberOn;
    byte m_interfaceMemberRed;
    byte m_interfaceMemberGreen;
    byte m_interfaceMemberBlue;
};

public ref class fezhatnodeSetRgbLedD3ColorCalledEventArgs sealed
{
public:
    fezhatnodeSetRgbLedD3ColorCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn, _In_ byte interfaceMemberRed, _In_ byte interfaceMemberGreen, _In_ byte interfaceMemberBlue);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property fezhatnodeSetRgbLedD3ColorResult^ Result
    {
        fezhatnodeSetRgbLedD3ColorResult^ get() { return m_result; }
        void set(_In_ fezhatnodeSetRgbLedD3ColorResult^ value) { m_result = value; }
    }

    property bool On
    {
        bool get() { return m_interfaceMemberOn; }
    }

    property byte Red
    {
        byte get() { return m_interfaceMemberRed; }
    }

    property byte Green
    {
        byte get() { return m_interfaceMemberGreen; }
    }

    property byte Blue
    {
        byte get() { return m_interfaceMemberBlue; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<fezhatnodeSetRgbLedD3ColorResult^>^ GetResultAsync(fezhatnodeSetRgbLedD3ColorCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<fezhatnodeSetRgbLedD3ColorResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<fezhatnodeSetRgbLedD3ColorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    fezhatnodeSetRgbLedD3ColorResult^ m_result;
    bool m_interfaceMemberOn;
    byte m_interfaceMemberRed;
    byte m_interfaceMemberGreen;
    byte m_interfaceMemberBlue;
};

public ref class fezhatnodeGetLightSensorValueCalledEventArgs sealed
{
public:
    fezhatnodeGetLightSensorValueCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property fezhatnodeGetLightSensorValueResult^ Result
    {
        fezhatnodeGetLightSensorValueResult^ get() { return m_result; }
        void set(_In_ fezhatnodeGetLightSensorValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<fezhatnodeGetLightSensorValueResult^>^ GetResultAsync(fezhatnodeGetLightSensorValueCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<fezhatnodeGetLightSensorValueResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<fezhatnodeGetLightSensorValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    fezhatnodeGetLightSensorValueResult^ m_result;
};

public ref class fezhatnodeGetTemperatureSensorValueCalledEventArgs sealed
{
public:
    fezhatnodeGetTemperatureSensorValueCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property fezhatnodeGetTemperatureSensorValueResult^ Result
    {
        fezhatnodeGetTemperatureSensorValueResult^ get() { return m_result; }
        void set(_In_ fezhatnodeGetTemperatureSensorValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<fezhatnodeGetTemperatureSensorValueResult^>^ GetResultAsync(fezhatnodeGetTemperatureSensorValueCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<fezhatnodeGetTemperatureSensorValueResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<fezhatnodeGetTemperatureSensorValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    fezhatnodeGetTemperatureSensorValueResult^ m_result;
};

// Readable Properties
// Writable Properties
} } } 
